using System.Linq.Expressions;
using MagicVilla.Villa.Api.Data;
using MagicVilla.Villa.Api.Repositories.IRepositories;
using Microsoft.EntityFrameworkCore;

namespace MagicVilla.Villa.Api.Repositories
{
    public class VillaRepository : IVillaRepository
    {
        private readonly ApplicationDbContext _dbContext;

        public VillaRepository(ApplicationDbContext dbContext) 
        {
            _dbContext = dbContext;
        }

        public async Task CreateAsync(Models.Villa entity)
        {
            await _dbContext.Villas.AddAsync(entity);   // EF will automatically add autogenerated Id to this model
            await SaveAsync();
        }

        public async Task UpdateAsync(Models.Villa entity)
        {
            _dbContext.Villas.Update(entity);
            await SaveAsync();
        }

        public async Task<Models.Villa> GetAsync(Expression<Func<Models.Villa, bool>> filter = null, bool tracked = true)
        {
            IQueryable<Models.Villa>  query = _dbContext.Villas;
            if (!tracked)
            {
                query = query.AsNoTracking();
            }
            if (filter != null) {
                query = query.Where(filter);
            }
            return await query.FirstOrDefaultAsync();
        }

        public async Task<List<Models.Villa>> GetAllAsync(Expression<Func<Models.Villa, bool>> filter = null)
        {
            IQueryable<Models.Villa>  query = _dbContext.Villas;

            if (filter != null) {
                query = query.Where(filter);
            }
            return await query.ToListAsync();
        }

        public async Task RemoveAsync(Models.Villa entity)
        {
            _dbContext.Villas.Remove(entity);
            await SaveAsync();
        }

        public async Task SaveAsync()
        {
            await _dbContext.SaveChangesAsync();
        }
    }
}