using System.Linq.Expressions;
using MagicVilla.Villa.Api.Data;
using MagicVilla.Villa.Api.Repositories.IRepositories;
using Microsoft.EntityFrameworkCore;
using static MagicVilla.Villa.Api.Common.Constants;

namespace MagicVilla.Villa.Api.Repositories
{
    public class Repository<T> : IRepository<T> where T : class
    {
        private readonly ApplicationDbContext _dbContext;
        internal DbSet<T> dbSet;

        public Repository(ApplicationDbContext dbContext) 
        {
            _dbContext = dbContext;
            this.dbSet = _dbContext.Set<T>();
        }

        public async Task CreateAsync(T entity)
        {
            await dbSet.AddAsync(entity);   // EF will automatically add autogenerated Id to this model
            await SaveAsync();
        }

        public async Task<T> GetAsync(Expression<Func<T, bool>> filter = null, bool tracked = true, string? includeProperties = null)
        {
            IQueryable<T>  query = dbSet;
            if (!tracked)
            {
                query = query.AsNoTracking();
            }
            if (filter != null) {
                query = query.Where(filter);
            }
            if (includeProperties != null)
            {
                foreach(var includeProp in includeProperties.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
                {
                    query = query.Include(includeProp);
                }
            }
            return await query.FirstOrDefaultAsync();
        }

        public async Task<List<T>> GetAllAsync(
            Expression<Func<T, bool>>? filter = null, 
            string? includeProperties = null,
            int? pageSize = null, 
            int? pageNumber = null
        )
        {
            IQueryable<T>  query = dbSet;

            if (filter != null) {
                query = query.Where(filter);
            }
            if (pageNumber.HasValue && pageSize.HasValue)
            {
                if (pageSize > MaxPageSize)
                {
                    pageSize = MaxPageSize;
                }
                query = query.Skip(pageSize.Value * (pageNumber.Value - 1)).Take(pageSize.Value);
            }
            if (includeProperties != null)
            {
                foreach(var includeProp in includeProperties.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
                {
                    query = query.Include(includeProp);
                }
            }
            return await query.ToListAsync();
        }

        public async Task RemoveAsync(T entity)
        {
            dbSet.Remove(entity);
            await SaveAsync();
        }

        public async Task SaveAsync()
        {
            await _dbContext.SaveChangesAsync();
        }
    }
}